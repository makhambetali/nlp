from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from sentence_transformers import SentenceTransformer
from annoy import AnnoyIndex
import numpy as np
import os

# ‚úÖ –°–æ–∑–¥–∞–µ–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Medical Services Search API", version="1.0")

# ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å
MODEL_NAME = "cointegrated/LaBSE-en-ru"
# MODEL_NAME = "sberbank-ai/sbert_large_nlu_ru"
embedder = SentenceTransformer(MODEL_NAME)

# ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏ (–∫–æ—Ä–ø—É—Å)
scopes = [
    "–î–æ–∫—Ç–æ—Ä –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞.",
    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥ –ª–µ—á–∏—Ç –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.",
    "–ü–µ–¥–∏–∞—Ç—Ä –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –ª–µ—á–µ–Ω–∏–µ–º –¥–µ—Ç–µ–π.",
    "–ù–µ–≤—Ä–æ–ª–æ–≥ –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –∂–µ–ª—É–¥–∫–∞ –∏ –∫–∏—à–µ—á–Ω–∏–∫–∞.",
    "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑—Ä–µ–Ω–∏–µ –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –æ—á–∫–∏.",
    "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ —É–¥–∞–ª—è–µ—Ç –∑—É–±—ã –∏ –ª–µ—á–∏—Ç –∫–∞—Ä–∏–µ—Å.",
    "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥ –¥–µ–ª–∞–µ—Ç —Å–Ω–∏–º–∫–∏ –æ—Ä–≥–∞–Ω–æ–≤ –∏ –∫–æ—Å—Ç–µ–π.",
    "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–≤–∏–≤–∫–∏ –∏ —Å—Ç–∞–≤–∏—Ç –∫–∞–ø–µ–ª—å–Ω–∏—Ü—ã.",
    "–î–∏–µ—Ç–æ–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.",
    "–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∞–∂ –∏ –ª–µ—á–µ–±–Ω—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É.",
    "–ê–∫—É—à–µ—Ä-–≥–∏–Ω–µ–∫–æ–ª–æ–≥ –≤–µ–¥–µ—Ç –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–æ–¥—ã.",
    "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥ –ª–µ—á–∏—Ç –∫–æ–∂–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –∞–∫–Ω–µ –∏ —ç–∫–∑–µ–º—É.",
    "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ–º –¥–∏–∞–±–µ—Ç–∞ –∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
    "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥ –ª–µ—á–∏—Ç –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É—à–µ–π, –≥–æ—Ä–ª–∞ –∏ –Ω–æ—Å–∞.",
    "–û–Ω–∫–æ–ª–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∏ –ª–µ—á–∏—Ç —Ä–∞–∫.",
    "–ü—Å–∏—Ö–∏–∞—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.",
    "–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥ –≤—ã—è–≤–ª—è–µ—Ç –∏ –ª–µ—á–∏—Ç –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏.",
    "–£—Ä–æ–ª–æ–≥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –º–æ—á–µ–≤—ã–≤–æ–¥—è—â–∏—Ö –ø—É—Ç–µ–π.",
    "–†–µ–≤–º–∞—Ç–æ–ª–æ–≥ –ø–æ–º–æ–≥–∞–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ –∫–æ—Å—Ç–µ–π.",
]

# ‚úÖ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Annoy-–∏–Ω–¥–µ–∫—Å–∞
INDEX_FILE = "medical_annoy_index.ann"
VECTOR_DIMENSION = 768  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–æ–¥–µ–ª–∏ (LaBSE)
METRIC = "angular"  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

# ‚úÖ –°–æ–∑–¥–∞–µ–º Annoy-–∏–Ω–¥–µ–∫—Å
annoy_index = AnnoyIndex(VECTOR_DIMENSION, METRIC)

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Annoy-–∏–Ω–¥–µ–∫—Å
if os.path.exists(INDEX_FILE):
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º Annoy-–∏–Ω–¥–µ–∫—Å...")
    annoy_index.load(INDEX_FILE)
else:
    print("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º Annoy-–∏–Ω–¥–µ–∫—Å...")
    
    # ‚úÖ –ö–æ–¥–∏—Ä—É–µ–º –∫–æ—Ä–ø—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ Annoy
    corpus_embeddings = embedder.encode(scopes, convert_to_tensor=False)

    for i, vector in enumerate(corpus_embeddings):
        annoy_index.add_item(i, vector)

    # ‚úÖ –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å (100 –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏)
    annoy_index.build(100)
    annoy_index.save(INDEX_FILE)
    print("‚úÖ Annoy-–∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

# ‚úÖ Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class SearchQuery(BaseModel):
    query: str
    top_k: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


@app.post("/search/")
async def search(query_data: SearchQuery):
    """
    –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –ø–æ —Å–º—ã—Å–ª—É.
    """
    query_embedding = embedder.encode(query_data.query, convert_to_tensor=False)

    # ‚úÖ –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ `top_k` –∑–∞–ø–∏—Å–µ–π
    nearest_neighbors = annoy_index.get_nns_by_vector(query_embedding, query_data.top_k, include_distances=True)

    results = [
        {"service": scopes[idx], "similarity": round(1 - distance, 4)}
        for idx, distance in zip(*nearest_neighbors)
    ]

    return {"query": query_data.query, "results": results}


@app.get("/")
async def home():
    return {"message": "Medical Services Search API is running. Use /docs to test."}
